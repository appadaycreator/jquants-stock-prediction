# J-Quants株価予測システム - 完全統合設定ファイル
# 最高優先度問題解決版 - 単一設定ファイルによる統合システム

# システム基本情報
system:
  name: "J-Quants株価予測システム"
  version: "2.0.0"
  environment: "production"  # development, staging, production
  debug: false
  architecture: "unified"  # 統合アーキテクチャ
  unified_system: true  # 統合システム使用フラグ
  # 統合システムの設定
  main_system: "unified_system.py"
  config_file: "config_final.yaml"

# J-Quants API設定
jquants:
  base_url: "https://api.jquants.com/v1"
  timeout: 30  # 秒
  max_retries: 3
  retry_interval: 5  # 秒
  rate_limit: 100  # リクエスト/分
  
  # 認証設定
  auth:
    token_expiry: 3600  # 秒
    refresh_threshold: 300  # 秒
    
  # データ取得設定
  data_fetch:
    batch_size: 100
    max_concurrent: 5
    cache_duration: 3600  # 秒
    
  # エンドポイント設定
  endpoints:
    auth: "/token/auth_user"
    refresh: "/token/auth_refresh"
    stock_list: "/listed/info"
    stock_prices: "/prices/daily_quotes"
    stock_financials: "/fins/statements"

# データ取得設定
data_fetch:
  # 取得する日付（YYYYMMDD形式）
  target_date: "20240301"
  # 出力ファイル名
  output_file: "stock_data.csv"
  # データ保存設定
  storage:
    format: "csv"  # csv, parquet, json
    compression: "gzip"
    encoding: "utf-8"

# データ前処理設定
preprocessing:
  # 入力ファイル
  input_file: "stock_data.csv"
  # 出力ファイル
  output_file: "processed_stock_data.csv"
  
  # 使用するカラム
  columns:
    - "Code"
    - "Date"
    - "Open"
    - "High"
    - "Low"
    - "Close"
    - "Volume"
    
  # データクリーニング設定
  cleaning:
    remove_duplicates: true
    handle_missing: "interpolate"  # drop, interpolate, fill
    outlier_detection: true
    outlier_method: "iqr"  # iqr, zscore
    # NaN値の閾値設定
    nan_threshold: 0.5  # 50%のNaN値を許可
    
  # 特徴量エンジニアリング設定
  feature_engineering:
    # 移動平均のウィンドウサイズ
    sma_windows: [5, 10, 25, 50]
    # 遅延特徴量の日数
    lag_days: [1, 5, 25]
    # 価格変動の期間
    price_change_periods: [1, 3, 5, 10]
    # 価格位置の期間
    price_position_periods: [20, 50]
    
  # 技術指標の設定
  technical_indicators:
    ema_windows: [12, 26]
    rsi_period: 14
    macd_fast: 12
    macd_slow: 26
    macd_signal: 9
    stoch_k: 14
    stoch_d: 3
    bb_period: 20
    bb_std: 2
    atr_period: 14
    volume_sma_period: 20
    adx_period: 14
    cci_period: 20

# 予測モデル設定
prediction:
  # 入力ファイル
  input_file: "processed_stock_data.csv"
  
  # 特徴量カラム（技術指標拡張版）
  features:
    # 基本移動平均
    - "SMA_5"
    - "SMA_10"
    - "SMA_25"
    - "SMA_50"
    # EMA
    - "EMA_12"
    - "EMA_26"
    # モメンタム系
    - "RSI"
    - "MACD"
    - "MACD_Signal"
    - "MACD_Histogram"
    - "Stoch_K"
    - "Stoch_D"
    # ボラティリティ系
    - "BB_Upper"
    - "BB_Lower"
    - "BB_Percent"
    - "BB_Width"
    - "ATR"
    - "ATR_Percent"
    # ボリューム系
    - "Volume_SMA"
    - "Volume_Rate"
    - "VWAP"
    - "VWAP_Deviation"
    - "OBV"
    - "OBV_SMA"
    - "PVT"
    # トレンド系
    - "ADX"
    - "Plus_DI"
    - "Minus_DI"
    - "CCI"
    # 価格変動
    - "Price_Change_1d"
    - "Price_Change_3d"
    - "Price_Change_5d"
    - "Price_Change_Pct_1d"
    - "Price_Change_Pct_3d"
    - "Price_Change_Pct_5d"
    - "Log_Return_1d"
    - "Log_Return_3d"
    - "Log_Return_5d"
    # 価格位置
    - "Price_Position_20d"
    - "Price_Position_50d"
    - "SMA_Deviation_20d"
    - "SMA_Deviation_50d"
    # ラグ特徴量
    - "Close_lag_1"
    - "Close_lag_5"
    # ボリューム
    - "Volume"
    
  # 目的変数
  target: "Close"
  
  # データ分割設定
  test_size: 0.2
  validation_size: 0.1
  random_state: 42
  
  # 特徴量選択設定
  feature_selection:
    enabled: true
    method: "mutual_info"  # mutual_info, f_regression, rfe
    k_best: 20
    
  # モデル選択設定
  model_selection:
    # 使用するモデル（単一モデル実行の場合）
    primary_model: "xgboost"
    # 複数モデル比較を実行するか
    compare_models: false
    
  # 各モデルのパラメータ設定
  models:
    random_forest:
      type: "random_forest"
      params:
        n_estimators: 200
        max_depth: 10
        random_state: 42
        min_samples_split: 5
        min_samples_leaf: 2
        
    xgboost:
      type: "xgboost"
      params:
        n_estimators: 150
        max_depth: 6
        learning_rate: 0.1
        subsample: 0.8
        colsample_bytree: 0.8
        random_state: 42
        
    linear_regression:
      type: "linear_regression"
      params:
        fit_intercept: true
        
    ridge:
      type: "ridge"
      params:
        alpha: 1.0
        random_state: 42
        
    lasso:
      type: "lasso"
      params:
        alpha: 0.1
        random_state: 42
        max_iter: 1000
        
  # 結果保存設定
  output:
    image: "stock_prediction_result.png"
    comparison_csv: "model_comparison_results.csv"
    model_pickle: "trained_model.pkl"
    predictions_csv: "predictions.csv"

# 統合ログ設定
logging:
  level: "INFO"  # DEBUG, INFO, WARNING, ERROR, CRITICAL
  format: "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
  file: "jquants.log"
  max_size: "10MB"
  backup_count: 5
  console_output: true
  # 統合ログシステムの設定
  unified_system: true
  error_file: "errors.log"
  performance_log: true

# パフォーマンス設定
performance:
  max_workers: 4
  memory_limit: "2GB"
  timeout: 300  # 秒
  cache_size: 1000
  cache_ttl: 3600  # 秒

# セキュリティ設定
security:
  enable_ssl: true
  allowed_origins: ["localhost:3000", "*.github.io"]
  rate_limit: 100  # リクエスト/分
  session_timeout: 1800  # 秒
  # 機密情報のマスキング設定
  sensitive_keys: ["password", "token", "key", "secret", "auth", "email"]
  mask_sensitive_data: true

# 統合エラーハンドリング設定
error_handling:
  # 統一エラーハンドリングの設定
  unified_handler: true
  error_categories:
    - "api_error"
    - "model_error"
    - "file_error"
    - "data_processing_error"
    - "validation_error"
    - "config_error"
    - "network_error"
    - "authentication_error"
  # エラー統計の設定
  error_statistics: true
  error_reporting: true
  # 復旧処理の設定
  auto_recovery: true
  max_recovery_attempts: 3
  # 統合システムの設定
  unified_system: true

# 環境別設定
environments:
  development:
    debug: true
    logging:
      level: "DEBUG"
    performance:
      max_workers: 2
      memory_limit: "1GB"
    error_handling:
      error_statistics: true
      
  staging:
    debug: false
    logging:
      level: "INFO"
    performance:
      max_workers: 3
      memory_limit: "1.5GB"
    error_handling:
      error_statistics: true
      
  production:
    debug: false
    logging:
      level: "WARNING"
    performance:
      max_workers: 4
      memory_limit: "2GB"
    security:
      rate_limit: 50  # より厳しい制限
    error_handling:
      error_statistics: true
      auto_recovery: true

# トレーディングシステム設定（統合）
trading:
  # 監視対象銘柄設定
  symbols:
    # 主要日本株
    - "7203.T"  # トヨタ自動車
    - "6758.T"  # ソニーグループ
    - "9984.T"  # ソフトバンクグループ
    - "9432.T"  # 日本電信電話
    - "6861.T"  # キーエンス
    - "4063.T"  # 信越化学工業
    - "8035.T"  # 東京エレクトロン
    - "8306.T"  # 三菱UFJフィナンシャル・グループ
    - "4503.T"  # アステラス製薬
    - "4519.T"  # 中外製薬
  
  # アカウント設定
  account:
    initial_value: 1000000  # 初期資金（円）
    max_position_size: 0.1  # 単一ポジションの最大サイズ（ポートフォリオの割合）
    max_portfolio_risk: 0.05  # ポートフォリオ全体の最大リスク
  
  # リアルタイムシグナル設定
  signals:
    # 技術指標パラメータ
    rsi:
      overbought: 70
      oversold: 30
      window: 14
    
    macd:
      fast_period: 12
      slow_period: 26
      signal_period: 9
    
    bollinger_bands:
      window: 20
      std_dev: 2
    
    # シグナル生成設定
    min_confidence: 0.6  # 最小信頼度
    max_signals: 10  # 最大シグナル数
    signal_strength_threshold: 0.7  # シグナル強度閾値
  
  # リスク管理設定
  risk_management:
    # 損切り設定
    stop_loss:
      base_percent: 5.0  # 基本損切り率（%）
      trailing_stop: true  # トレーリングストップ有効
      trailing_percent: 2.0  # トレーリングストップ率（%）
    
    # 利確設定
    take_profit:
      base_percent: 10.0  # 基本利確率（%）
      dynamic: true  # 動的利確有効
    
    # ポジションサイズ管理
    position_sizing:
      risk_per_trade: 0.02  # 1取引あたりのリスク（ポートフォリオの割合）
      max_correlation: 0.7  # 最大相関係数
    
    # リスク閾値
    risk_thresholds:
      high_risk: 0.7  # 高リスク閾値
      medium_risk: 0.5  # 中リスク閾値
      low_risk: 0.3  # 低リスク閾値
  
  # 複数銘柄監視設定
  monitoring:
    # データ取得設定
    data_fetch:
      period: "6mo"  # データ取得期間
      interval: "1d"  # データ間隔
      max_workers: 5  # 並列処理数
    
    # 分析設定
    analysis:
      technical_weight: 0.4  # 技術分析の重み
      fundamental_weight: 0.3  # ファンダメンタル分析の重み
      momentum_weight: 0.3  # モメンタム分析の重み
    
    # 比較分析設定
    comparison:
      correlation_threshold: 0.8  # 相関閾値
      diversification_target: 0.7  # 分散投資目標スコア
  
  # 統合システム設定
  integration:
    # 分析間隔
    analysis_interval: 300  # 分析間隔（秒）
    
    # 自動実行設定
    auto_execution:
      enabled: false  # 自動実行有効/無効
      min_confidence: 0.8  # 自動実行最小信頼度
      max_positions: 5  # 最大同時ポジション数
    
    # 通知設定
    notifications:
      email_enabled: false  # メール通知有効/無効
      email_address: ""  # メールアドレス
      alert_thresholds:
        high_risk: 0.8  # 高リスクアラート閾値
        profit_target: 0.15  # 利益目標アラート閾値
        loss_limit: -0.1  # 損失限界アラート閾値

# 感情分析システム設定（統合版）
sentiment_analysis:
  # API設定
  api_keys:
    news_api_key: "your_news_api_key_here"
    twitter_api_key: "your_twitter_api_key"
    twitter_api_secret: "your_twitter_api_secret"
    twitter_access_token: "your_twitter_access_token"
    twitter_access_token_secret: "your_twitter_access_token_secret"
  
  # ニュース分析設定
  news:
    language: "en"
    lookback_days: 7
    max_articles: 100
    relevance_threshold: 0.3
  
  # SNS分析設定
  social_media:
    max_tweets: 100
    hashtag_trends: true
    mention_analysis: true
    sentiment_threshold: 0.1
  
  # 感情分析エンジン設定
  engines:
    vader_weight: 0.7
    textblob_weight: 0.3
    confidence_threshold: 0.6
  
  # リアルタイム感情指標設定
  realtime_metrics:
    enabled: true
    update_interval: 60  # 秒
    metrics_window: 1000  # 保持する指標数
    alert_thresholds:
      critical: 0.9
      high: 0.7
      medium: 0.5
      low: 0.3
    visualization:
      enabled: true
      save_path: "realtime_metrics_charts"
      update_frequency: 300  # 5分
  
  # 動的リスク調整設定
  dynamic_risk_adjustment:
    enabled: true
    adjustment_frequency: 300  # 5分
    sentiment_weights:
      news: 0.4
      social: 0.3
      technical: 0.2
      market: 0.1
    adjustment_factors:
      positive_sentiment:
        position_size: 1.2
        stop_loss: 0.8
        take_profit: 1.3
        leverage: 1.1
      negative_sentiment:
        position_size: 0.6
        stop_loss: 1.3
        take_profit: 0.7
        leverage: 0.8
      neutral_sentiment:
        position_size: 1.0
        stop_loss: 1.0
        take_profit: 1.0
        leverage: 1.0
  
  # 感情トレンド予測設定
  sentiment_trend_prediction:
    enabled: true
    prediction_horizons: [5, 15, 30, 60]  # 分
    feature_window: 20
    min_history_length: 50
    models:
      linear_regression:
        enabled: true
        retrain_frequency: 1440  # 24時間
      random_forest:
        enabled: true
        n_estimators: 100
        max_depth: 10
        retrain_frequency: 1440
    pattern_detection:
      enabled: true
      uptrend_threshold: 0.01
      downtrend_threshold: -0.01
      sideways_threshold: 0.1
      volatility_increase_threshold: 1.5

# 高頻度取引システム設定（統合版）
hft:
  # レイテンシー設定
  latency:
    threshold: 0.001  # 1ms (秒)
    max_execution_time: 0.005  # 5ms (秒)
    network_timeout: 0.1  # 100ms (秒)
    heartbeat_interval: 0.01  # 10ms (秒)
  
  # 利益設定
  profit:
    threshold: 0.001  # 0.1% (最小利益率)
    target_spread: 0.002  # 0.2% (目標スプレッド)
    max_profit_per_trade: 1000.0  # 最大利益（ドル）
    min_volume: 100  # 最小取引量
  
  # リスク管理
  risk:
    max_position_size: 1000000  # 最大ポジションサイズ（ドル）
    risk_limit: 0.02  # 2% (リスク制限)
    max_daily_loss: 10000.0  # 最大日次損失（ドル）
    stop_loss_percentage: 0.05  # 5% (ストップロス)
    max_concurrent_trades: 10  # 最大同時取引数
  
  # 取引所設定
  exchanges:
    primary:
      - name: "Binance"
        api_key: "${BINANCE_API_KEY}"
        secret_key: "${BINANCE_SECRET_KEY}"
        base_url: "https://api.binance.com"
        rate_limit: 1200  # リクエスト/分
        enabled: true
      
      - name: "Coinbase"
        api_key: "${COINBASE_API_KEY}"
        secret_key: "${COINBASE_SECRET_KEY}"
        base_url: "https://api.coinbase.com"
        rate_limit: 1000  # リクエスト/分
        enabled: true
      
      - name: "Kraken"
        api_key: "${KRAKEN_API_KEY}"
        secret_key: "${KRAKEN_SECRET_KEY}"
        base_url: "https://api.kraken.com"
        rate_limit: 1000  # リクエスト/分
        enabled: true
  
  # 監視対象シンボル
  symbols:
    crypto:
      - "BTC/USDT"
      - "ETH/USDT"
      - "XRP/USDT"
      - "ADA/USDT"
      - "DOT/USDT"
    
    stocks:
      - "AAPL"
      - "GOOGL"
      - "MSFT"
      - "TSLA"
      - "AMZN"
  
  # データソース設定
  data_sources:
    market_data:
      type: "websocket"  # websocket, rest_api, file
      url: "wss://stream.binance.com:9443/ws/btcusdt@ticker"
      reconnect_interval: 5  # 秒
      buffer_size: 1000
    
    price_feeds:
      - provider: "Binance"
        symbols: ["BTC/USDT", "ETH/USDT"]
        update_frequency: 0.001  # 1ms
      
      - provider: "Coinbase"
        symbols: ["BTC/USD", "ETH/USD"]
        update_frequency: 0.001  # 1ms
  
  # バックテスト設定
  backtest:
    enabled: true
    start_date: "2024-01-01"
    end_date: "2024-12-31"
    initial_capital: 100000.0
    commission: 0.001  # 0.1%
    slippage: 0.0005  # 0.05%

# 統合システム設定（最適化版）
integration:
  # 統合完了フラグ
  consolidation_completed: true
  unified_architecture: true
  single_config_file: true
  
  # 最適化設定
  optimization:
    legacy_files_removed: true
    duplicate_code_removed: true
    single_system_architecture: true
    performance_optimized: true
  
  # 統合システム情報
  unified_system:
    main_file: "unified_system.py"
    config_file: "config_final.yaml"
    error_handling: "integrated"
    logging: "integrated"
    performance_monitoring: "integrated"
  
  # レガシー設定ファイル廃止予定
  deprecated_configs:
    files:
      - "config.yaml"
      - "sentiment_config.yaml"
      - "hft_config.yaml"
      - "test_config.yaml"
    migration_date: "2024-12-31"
