#!/usr/bin/env python3
"""
„É¶„Éº„Ç∂„Éº„Éï„É¨„É≥„Éâ„É™„Éº„Å™„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„Ç∑„Çπ„ÉÜ„É†
ÊäÄË°ìÁöÑ„Å™„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÂàÜ„Åã„Çä„ÇÑ„Åô„ÅÑÊó•Êú¨Ë™û„Å´Â§âÊèõ
"""

from typing import Dict, Any, Optional, List
from enum import Enum
from dataclasses import dataclass
import re


class ErrorType(Enum):
    """„Ç®„É©„Éº„Çø„Ç§„Éó„ÅÆÂÆöÁæ©"""
    
    CONNECTION_ERROR = "connection_error"
    DATA_ERROR = "data_error"
    MODEL_ERROR = "model_error"
    FILE_ERROR = "file_error"
    AUTHENTICATION_ERROR = "authentication_error"
    VALIDATION_ERROR = "validation_error"
    SYSTEM_ERROR = "system_error"
    API_ERROR = "api_error"
    NETWORK_ERROR = "network_error"
    PERMISSION_ERROR = "permission_error"


@dataclass
class UserFriendlyMessage:
    """„É¶„Éº„Ç∂„Éº„Éï„É¨„É≥„Éâ„É™„Éº„Å™„É°„ÉÉ„Çª„Éº„Ç∏"""
    
    title: str
    description: str
    solution: str
    prevention: str
    severity: str
    icon: str


class UserFriendlyErrorMessages:
    """„É¶„Éº„Ç∂„Éº„Éï„É¨„É≥„Éâ„É™„Éº„Å™„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„Ç∑„Çπ„ÉÜ„É†"""
    
    def __init__(self):
        """ÂàùÊúüÂåñ"""
        self.error_messages = self._initialize_error_messages()
        self.patterns = self._initialize_error_patterns()
    
    def _initialize_error_messages(self) -> Dict[ErrorType, UserFriendlyMessage]:
        """„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„ÅÆÂàùÊúüÂåñ"""
        return {
            ErrorType.CONNECTION_ERROR: UserFriendlyMessage(
                title="Êé•Á∂ö„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü",
                description="„Ç§„É≥„Çø„Éº„Éç„ÉÉ„ÉàÊé•Á∂ö„Åæ„Åü„ÅØ„Çµ„Éº„Éê„Éº„Å®„ÅÆÈÄö‰ø°„Å´ÂïèÈ°å„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ",
                solution="1. „Ç§„É≥„Çø„Éº„Éç„ÉÉ„ÉàÊé•Á∂ö„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ\n2. „Åó„Å∞„Çâ„ÅèÊôÇÈñì„Çí„Åä„ÅÑ„Å¶„Åã„ÇâÂÜçÂ∫¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ\n3. VPN„Çí‰ΩøÁî®„Åó„Å¶„ÅÑ„ÇãÂ†¥Âêà„ÅØ„ÄÅ‰∏ÄÂ∫¶ÂàáÊñ≠„Åó„Å¶„Åø„Å¶„Åè„Å†„Åï„ÅÑ",
                prevention="ÂÆâÂÆö„Åó„Åü„Ç§„É≥„Çø„Éº„Éç„ÉÉ„ÉàÁí∞Â¢É„Åß„ÅîÂà©Áî®„Åè„Å†„Åï„ÅÑ",
                severity="medium",
                icon="üåê"
            ),
            ErrorType.DATA_ERROR: UserFriendlyMessage(
                title="„Éá„Éº„Çø„ÅÆÂá¶ÁêÜ„Å´ÂïèÈ°å„Åå„ÅÇ„Çä„Åæ„Åô",
                description="Ê†™‰æ°„Éá„Éº„Çø„ÅÆË™≠„ÅøËæº„Åø„ÇÑÂá¶ÁêÜ‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ",
                solution="1. „Éá„Éº„Çø„Éï„Ç°„Ç§„É´„ÅåÊ≠£„Åó„ÅÑÂΩ¢Âºè„ÅãÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ\n2. „Éï„Ç°„Ç§„É´„ÅåÁ†¥Êêç„Åó„Å¶„ÅÑ„Å™„ÅÑ„ÅãÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ\n3. ÂøÖË¶Å„Å´Âøú„Åò„Å¶„Éá„Éº„Çø„ÇíÂÜçÂèñÂæó„Åó„Å¶„Åè„Å†„Åï„ÅÑ",
                prevention="ÂÆöÊúüÁöÑ„Å´„Éá„Éº„Çø„ÅÆÊï¥ÂêàÊÄß„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ",
                severity="high",
                icon="üìä"
            ),
            ErrorType.MODEL_ERROR: UserFriendlyMessage(
                title="‰∫àÊ∏¨„É¢„Éá„É´„ÅÆÂÆüË°å„Å´ÂïèÈ°å„Åå„ÅÇ„Çä„Åæ„Åô",
                description="AI‰∫àÊ∏¨„É¢„Éá„É´„ÅÆÂ≠¶Áøí„ÇÑ‰∫àÊ∏¨Âá¶ÁêÜ‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ",
                solution="1. „É¢„Éá„É´„ÅÆÂÜçÂ≠¶Áøí„ÇíÂÆüË°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ\n2. ÂÖ•Âäõ„Éá„Éº„Çø„ÅÆÂΩ¢Âºè„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ\n3. „Ç∑„Çπ„ÉÜ„É†ÁÆ°ÁêÜËÄÖ„Å´„ÅäÂïè„ÅÑÂêà„Çè„Åõ„Åè„Å†„Åï„ÅÑ",
                prevention="ÂÆöÊúüÁöÑ„Å´„É¢„Éá„É´„ÅÆÊÄßËÉΩ„ÇíÁõ£Ë¶ñ„Åó„Å¶„Åè„Å†„Åï„ÅÑ",
                severity="high",
                icon="ü§ñ"
            ),
            ErrorType.FILE_ERROR: UserFriendlyMessage(
                title="„Éï„Ç°„Ç§„É´„ÅÆÊìç‰Ωú„Å´ÂïèÈ°å„Åå„ÅÇ„Çä„Åæ„Åô",
                description="„Éï„Ç°„Ç§„É´„ÅÆË™≠„ÅøËæº„Åø„ÄÅÊõ∏„ÅçËæº„Åø„ÄÅ„Åæ„Åü„ÅØÂâäÈô§‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ",
                solution="1. „Éï„Ç°„Ç§„É´„ÅÆÂ≠òÂú®„Å®„Ç¢„ÇØ„Çª„ÇπÊ®©Èôê„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ\n2. „Éá„Ç£„Çπ„ÇØÂÆπÈáè„ÅåÂçÅÂàÜ„ÅãÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ\n3. „Éï„Ç°„Ç§„É´„Åå‰ªñ„ÅÆ„Éó„É≠„Ç∞„É©„É†„Åß‰ΩøÁî®„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑ„ÅãÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ",
                prevention="ÂÆöÊúüÁöÑ„Å´„Éá„Ç£„Çπ„ÇØÂÆπÈáè„Å®„Éï„Ç°„Ç§„É´Ê®©Èôê„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ",
                severity="medium",
                icon="üìÅ"
            ),
            ErrorType.AUTHENTICATION_ERROR: UserFriendlyMessage(
                title="Ë™çË®º„Å´ÂïèÈ°å„Åå„ÅÇ„Çä„Åæ„Åô",
                description="API„Ç≠„Éº„ÇÑË™çË®ºÊÉÖÂ†±„Å´ÂïèÈ°å„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ",
                solution="1. API„Ç≠„Éº„ÅåÊ≠£„Åó„ÅÑ„ÅãÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ\n2. Ë™çË®ºÊÉÖÂ†±„ÅÆÊúâÂäπÊúüÈôê„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ\n3. ÂøÖË¶Å„Å´Âøú„Åò„Å¶Êñ∞„Åó„ÅÑË™çË®ºÊÉÖÂ†±„ÇíÂèñÂæó„Åó„Å¶„Åè„Å†„Åï„ÅÑ",
                prevention="Ë™çË®ºÊÉÖÂ†±„ÅØÂÆâÂÖ®„Å´ÁÆ°ÁêÜ„Åó„ÄÅÂÆöÊúüÁöÑ„Å´Êõ¥Êñ∞„Åó„Å¶„Åè„Å†„Åï„ÅÑ",
                severity="high",
                icon="üîê"
            ),
            ErrorType.VALIDATION_ERROR: UserFriendlyMessage(
                title="ÂÖ•Âäõ„Éá„Éº„Çø„Å´ÂïèÈ°å„Åå„ÅÇ„Çä„Åæ„Åô",
                description="ÂÖ•Âäõ„Åï„Çå„Åü„Éá„Éº„Çø„ÅÆÂΩ¢Âºè„ÇÑÂÜÖÂÆπ„Å´ÂïèÈ°å„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ",
                solution="1. ÂÖ•Âäõ„Éá„Éº„Çø„ÅÆÂΩ¢Âºè„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ\n2. ÂøÖÈ†àÈ†ÖÁõÆ„Åå„Åô„Åπ„Å¶ÂÖ•Âäõ„Åï„Çå„Å¶„ÅÑ„Çã„ÅãÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ\n3. „Éá„Éº„Çø„ÅÆÁØÑÂõ≤„ÇÑÂà∂Èôê„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ",
                prevention="ÂÖ•ÂäõÊôÇ„Å´ÂÖ•Âäõ„ÉÅ„Çß„ÉÉ„ÇØÊ©üËÉΩ„ÇíÊ¥ªÁî®„Åó„Å¶„Åè„Å†„Åï„ÅÑ",
                severity="low",
                icon="‚úÖ"
            ),
            ErrorType.SYSTEM_ERROR: UserFriendlyMessage(
                title="„Ç∑„Çπ„ÉÜ„É†„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü",
                description="„Ç∑„Çπ„ÉÜ„É†ÂÜÖÈÉ®„Åß‰∫àÊúü„Åó„Å™„ÅÑ„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ",
                solution="1. „Ç∑„Çπ„ÉÜ„É†„ÇíÂÜçËµ∑Âãï„Åó„Å¶„Åè„Å†„Åï„ÅÑ\n2. „Åó„Å∞„Çâ„ÅèÊôÇÈñì„Çí„Åä„ÅÑ„Å¶„Åã„ÇâÂÜçÂ∫¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ\n3. ÂïèÈ°å„ÅåÁ∂ö„ÅèÂ†¥Âêà„ÅØ„ÄÅ„Ç∑„Çπ„ÉÜ„É†ÁÆ°ÁêÜËÄÖ„Å´„ÅäÂïè„ÅÑÂêà„Çè„Åõ„Åè„Å†„Åï„ÅÑ",
                prevention="ÂÆöÊúüÁöÑ„Å´„Ç∑„Çπ„ÉÜ„É†„ÅÆ„É°„É≥„ÉÜ„Éä„É≥„Çπ„ÇíÂÆüË°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ",
                severity="critical",
                icon="‚ö†Ô∏è"
            ),
            ErrorType.API_ERROR: UserFriendlyMessage(
                title="APIÂëº„Å≥Âá∫„Åó„Å´ÂïèÈ°å„Åå„ÅÇ„Çä„Åæ„Åô",
                description="Â§ñÈÉ®API„Å®„ÅÆÈÄö‰ø°‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ",
                solution="1. API„ÅÆÂà©Áî®Âà∂Èôê„Å´ÈÅî„Åó„Å¶„ÅÑ„Å™„ÅÑ„ÅãÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ\n2. API„ÅÆ„Çµ„Éº„Éì„ÇπÁä∂Ê≥Å„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ\n3. „Åó„Å∞„Çâ„ÅèÊôÇÈñì„Çí„Åä„ÅÑ„Å¶„Åã„ÇâÂÜçÂ∫¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ",
                prevention="API„ÅÆÂà©Áî®Âà∂Èôê„ÇíÁõ£Ë¶ñ„Åó„ÄÅÈÅ©Âàá„Å™ÈñìÈöî„Åß„É™„ÇØ„Ç®„Çπ„Éà„ÇíÈÄÅ‰ø°„Åó„Å¶„Åè„Å†„Åï„ÅÑ",
                severity="medium",
                icon="üîå"
            ),
            ErrorType.NETWORK_ERROR: UserFriendlyMessage(
                title="„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü",
                description="„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÊé•Á∂ö„Å´ÂïèÈ°å„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ",
                solution="1. „Ç§„É≥„Çø„Éº„Éç„ÉÉ„ÉàÊé•Á∂ö„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ\n2. „Éï„Ç°„Ç§„Ç¢„Ç¶„Ç©„Éº„É´Ë®≠ÂÆö„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ\n3. „Éó„É≠„Ç≠„Ç∑Ë®≠ÂÆö„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ",
                prevention="ÂÆâÂÆö„Åó„Åü„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÁí∞Â¢É„Åß„ÅîÂà©Áî®„Åè„Å†„Åï„ÅÑ",
                severity="medium",
                icon="üåç"
            ),
            ErrorType.PERMISSION_ERROR: UserFriendlyMessage(
                title="„Ç¢„ÇØ„Çª„ÇπÊ®©Èôê„Å´ÂïèÈ°å„Åå„ÅÇ„Çä„Åæ„Åô",
                description="„Éï„Ç°„Ç§„É´„ÇÑ„Éá„Ç£„É¨„ÇØ„Éà„É™„Å∏„ÅÆ„Ç¢„ÇØ„Çª„ÇπÊ®©Èôê„Åå‰∏çË∂≥„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ",
                solution="1. „Éï„Ç°„Ç§„É´„ÅÆ„Ç¢„ÇØ„Çª„ÇπÊ®©Èôê„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ\n2. ÁÆ°ÁêÜËÄÖÊ®©Èôê„ÅßÂÆüË°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ\n3. ÂøÖË¶Å„Å´Âøú„Åò„Å¶Ê®©Èôê„ÇíÂ§âÊõ¥„Åó„Å¶„Åè„Å†„Åï„ÅÑ",
                prevention="ÈÅ©Âàá„Å™„Ç¢„ÇØ„Çª„ÇπÊ®©Èôê„ÇíË®≠ÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ",
                severity="medium",
                icon="üîí"
            )
        }
    
    def _initialize_error_patterns(self) -> Dict[str, ErrorType]:
        """„Ç®„É©„Éº„Éë„Çø„Éº„É≥„ÅÆÂàùÊúüÂåñ"""
        return {
            # Êé•Á∂ö„Ç®„É©„Éº
            r".*connection.*error.*": ErrorType.CONNECTION_ERROR,
            r".*connection.*refused.*": ErrorType.CONNECTION_ERROR,
            r".*connection.*timeout.*": ErrorType.CONNECTION_ERROR,
            r".*connection.*reset.*": ErrorType.CONNECTION_ERROR,
            r".*connection.*aborted.*": ErrorType.CONNECTION_ERROR,
            r".*connection.*lost.*": ErrorType.CONNECTION_ERROR,
            r".*connection.*failed.*": ErrorType.CONNECTION_ERROR,
            r".*connection.*closed.*": ErrorType.CONNECTION_ERROR,
            r".*connection.*broken.*": ErrorType.CONNECTION_ERROR,
            r".*connection.*terminated.*": ErrorType.CONNECTION_ERROR,
            
            # „Éá„Éº„Çø„Ç®„É©„Éº
            r".*data.*error.*": ErrorType.DATA_ERROR,
            r".*data.*not.*found.*": ErrorType.DATA_ERROR,
            r".*data.*corrupted.*": ErrorType.DATA_ERROR,
            r".*data.*invalid.*": ErrorType.DATA_ERROR,
            r".*data.*format.*": ErrorType.DATA_ERROR,
            r".*data.*type.*": ErrorType.DATA_ERROR,
            r".*data.*missing.*": ErrorType.DATA_ERROR,
            r".*data.*empty.*": ErrorType.DATA_ERROR,
            r".*data.*null.*": ErrorType.DATA_ERROR,
            r".*data.*nan.*": ErrorType.DATA_ERROR,
            
            # „É¢„Éá„É´„Ç®„É©„Éº
            r".*model.*error.*": ErrorType.MODEL_ERROR,
            r".*model.*not.*found.*": ErrorType.MODEL_ERROR,
            r".*model.*failed.*": ErrorType.MODEL_ERROR,
            r".*model.*training.*": ErrorType.MODEL_ERROR,
            r".*model.*prediction.*": ErrorType.MODEL_ERROR,
            r".*model.*inference.*": ErrorType.MODEL_ERROR,
            r".*model.*loading.*": ErrorType.MODEL_ERROR,
            r".*model.*saving.*": ErrorType.MODEL_ERROR,
            r".*model.*serialization.*": ErrorType.MODEL_ERROR,
            r".*model.*deserialization.*": ErrorType.MODEL_ERROR,
            
            # „Éï„Ç°„Ç§„É´„Ç®„É©„Éº
            r".*file.*error.*": ErrorType.FILE_ERROR,
            r".*file.*not.*found.*": ErrorType.FILE_ERROR,
            r".*file.*permission.*": ErrorType.FILE_ERROR,
            r".*file.*access.*": ErrorType.FILE_ERROR,
            r".*file.*read.*": ErrorType.FILE_ERROR,
            r".*file.*write.*": ErrorType.FILE_ERROR,
            r".*file.*open.*": ErrorType.FILE_ERROR,
            r".*file.*close.*": ErrorType.FILE_ERROR,
            r".*file.*delete.*": ErrorType.FILE_ERROR,
            r".*file.*create.*": ErrorType.FILE_ERROR,
            
            # Ë™çË®º„Ç®„É©„Éº
            r".*authentication.*error.*": ErrorType.AUTHENTICATION_ERROR,
            r".*auth.*error.*": ErrorType.AUTHENTICATION_ERROR,
            r".*login.*error.*": ErrorType.AUTHENTICATION_ERROR,
            r".*password.*error.*": ErrorType.AUTHENTICATION_ERROR,
            r".*token.*error.*": ErrorType.AUTHENTICATION_ERROR,
            r".*key.*error.*": ErrorType.AUTHENTICATION_ERROR,
            r".*credential.*error.*": ErrorType.AUTHENTICATION_ERROR,
            r".*unauthorized.*": ErrorType.AUTHENTICATION_ERROR,
            r".*forbidden.*": ErrorType.AUTHENTICATION_ERROR,
            r".*access.*denied.*": ErrorType.AUTHENTICATION_ERROR,
            
            # „Éê„É™„Éá„Éº„Ç∑„Éß„É≥„Ç®„É©„Éº
            r".*validation.*error.*": ErrorType.VALIDATION_ERROR,
            r".*invalid.*input.*": ErrorType.VALIDATION_ERROR,
            r".*invalid.*parameter.*": ErrorType.VALIDATION_ERROR,
            r".*invalid.*argument.*": ErrorType.VALIDATION_ERROR,
            r".*invalid.*value.*": ErrorType.VALIDATION_ERROR,
            r".*invalid.*format.*": ErrorType.VALIDATION_ERROR,
            r".*invalid.*type.*": ErrorType.VALIDATION_ERROR,
            r".*invalid.*range.*": ErrorType.VALIDATION_ERROR,
            r".*invalid.*length.*": ErrorType.VALIDATION_ERROR,
            r".*invalid.*size.*": ErrorType.VALIDATION_ERROR,
            
            # „Ç∑„Çπ„ÉÜ„É†„Ç®„É©„Éº
            r".*system.*error.*": ErrorType.SYSTEM_ERROR,
            r".*internal.*error.*": ErrorType.SYSTEM_ERROR,
            r".*server.*error.*": ErrorType.SYSTEM_ERROR,
            r".*runtime.*error.*": ErrorType.SYSTEM_ERROR,
            r".*fatal.*error.*": ErrorType.SYSTEM_ERROR,
            r".*critical.*error.*": ErrorType.SYSTEM_ERROR,
            r".*unexpected.*error.*": ErrorType.SYSTEM_ERROR,
            r".*unknown.*error.*": ErrorType.SYSTEM_ERROR,
            r".*general.*error.*": ErrorType.SYSTEM_ERROR,
            r".*default.*error.*": ErrorType.SYSTEM_ERROR,
            
            # API„Ç®„É©„Éº
            r".*api.*error.*": ErrorType.API_ERROR,
            r".*api.*failed.*": ErrorType.API_ERROR,
            r".*api.*timeout.*": ErrorType.API_ERROR,
            r".*api.*limit.*": ErrorType.API_ERROR,
            r".*api.*quota.*": ErrorType.API_ERROR,
            r".*api.*rate.*": ErrorType.API_ERROR,
            r".*api.*throttle.*": ErrorType.API_ERROR,
            r".*api.*blocked.*": ErrorType.API_ERROR,
            r".*api.*banned.*": ErrorType.API_ERROR,
            r".*api.*suspended.*": ErrorType.API_ERROR,
            
            # „Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„Ç®„É©„Éº
            r".*network.*error.*": ErrorType.NETWORK_ERROR,
            r".*network.*timeout.*": ErrorType.NETWORK_ERROR,
            r".*network.*unreachable.*": ErrorType.NETWORK_ERROR,
            r".*network.*unavailable.*": ErrorType.NETWORK_ERROR,
            r".*network.*down.*": ErrorType.NETWORK_ERROR,
            r".*network.*offline.*": ErrorType.NETWORK_ERROR,
            r".*network.*disconnected.*": ErrorType.NETWORK_ERROR,
            r".*network.*interrupted.*": ErrorType.NETWORK_ERROR,
            r".*network.*unstable.*": ErrorType.NETWORK_ERROR,
            r".*network.*slow.*": ErrorType.NETWORK_ERROR,
            
            # Ê®©Èôê„Ç®„É©„Éº
            r".*permission.*error.*": ErrorType.PERMISSION_ERROR,
            r".*permission.*denied.*": ErrorType.PERMISSION_ERROR,
            r".*access.*denied.*": ErrorType.PERMISSION_ERROR,
            r".*unauthorized.*": ErrorType.PERMISSION_ERROR,
            r".*forbidden.*": ErrorType.PERMISSION_ERROR,
            r".*restricted.*": ErrorType.PERMISSION_ERROR,
            r".*blocked.*": ErrorType.PERMISSION_ERROR,
            r".*locked.*": ErrorType.PERMISSION_ERROR,
            r".*protected.*": ErrorType.PERMISSION_ERROR,
            r".*secure.*": ErrorType.PERMISSION_ERROR
        }
    
    def get_user_friendly_message(self, error_message: str, error_type: Optional[ErrorType] = None) -> UserFriendlyMessage:
        """
        „Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„Åã„Çâ„É¶„Éº„Ç∂„Éº„Éï„É¨„É≥„Éâ„É™„Éº„Å™„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÂèñÂæó
        
        Args:
            error_message: ÂÖÉ„ÅÆ„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏
            error_type: „Ç®„É©„Éº„Çø„Ç§„ÉóÔºàÊåáÂÆö„Åï„Çå„ÅüÂ†¥ÂêàÔºâ
            
        Returns:
            UserFriendlyMessage: „É¶„Éº„Ç∂„Éº„Éï„É¨„É≥„Éâ„É™„Éº„Å™„É°„ÉÉ„Çª„Éº„Ç∏
        """
        # „Ç®„É©„Éº„Çø„Ç§„Éó„ÅåÊåáÂÆö„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑÂ†¥Âêà„ÅØËá™ÂãïÂà§ÂÆö
        if error_type is None:
            error_type = self._detect_error_type(error_message)
        
        # „Ç®„É©„Éº„Çø„Ç§„Éó„Å´ÂØæÂøú„Åô„Çã„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÂèñÂæó
        if error_type in self.error_messages:
            return self.error_messages[error_type]
        
        # „Éá„Éï„Ç©„É´„Éà„ÅÆ„Ç∑„Çπ„ÉÜ„É†„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏
        return self.error_messages[ErrorType.SYSTEM_ERROR]
    
    def _detect_error_type(self, error_message: str) -> ErrorType:
        """
        „Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„Åã„Çâ„Ç®„É©„Éº„Çø„Ç§„Éó„ÇíËá™ÂãïÂà§ÂÆö
        
        Args:
            error_message: „Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏
            
        Returns:
            ErrorType: Âà§ÂÆö„Åï„Çå„Åü„Ç®„É©„Éº„Çø„Ç§„Éó
        """
        error_message_lower = error_message.lower()
        
        # „Éë„Çø„Éº„É≥„Éû„ÉÉ„ÉÅ„É≥„Ç∞„Åß„Ç®„É©„Éº„Çø„Ç§„Éó„ÇíÂà§ÂÆö
        for pattern, error_type in self.patterns.items():
            if re.search(pattern, error_message_lower):
                return error_type
        
        # „Éá„Éï„Ç©„É´„Éà„ÅØ„Ç∑„Çπ„ÉÜ„É†„Ç®„É©„Éº
        return ErrorType.SYSTEM_ERROR
    
    def format_error_message(self, error_message: str, error_type: Optional[ErrorType] = None) -> str:
        """
        „Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„Çí„Éï„Ç©„Éº„Éû„ÉÉ„Éà
        
        Args:
            error_message: ÂÖÉ„ÅÆ„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏
            error_type: „Ç®„É©„Éº„Çø„Ç§„Éó
            
        Returns:
            str: „Éï„Ç©„Éº„Éû„ÉÉ„Éà„Åï„Çå„Åü„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏
        """
        user_friendly = self.get_user_friendly_message(error_message, error_type)
        
        formatted_message = f"""
{user_friendly.icon} {user_friendly.title}

{user_friendly.description}

üîß Ëß£Ê±∫ÊñπÊ≥ï:
{user_friendly.solution}

üõ°Ô∏è ‰∫àÈò≤Á≠ñ:
{user_friendly.prevention}

ÈáçË¶ÅÂ∫¶: {user_friendly.severity.upper()}
        """.strip()
        
        return formatted_message
    
    def get_error_guidance(self, error_message: str, error_type: Optional[ErrorType] = None) -> Dict[str, Any]:
        """
        „Ç®„É©„Éº„Ç¨„Ç§„ÉÄ„É≥„Çπ„ÇíÂèñÂæó
        
        Args:
            error_message: ÂÖÉ„ÅÆ„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏
            error_type: „Ç®„É©„Éº„Çø„Ç§„Éó
            
        Returns:
            Dict[str, Any]: „Ç®„É©„Éº„Ç¨„Ç§„ÉÄ„É≥„ÇπÊÉÖÂ†±
        """
        user_friendly = self.get_user_friendly_message(error_message, error_type)
        
        return {
            "title": user_friendly.title,
            "description": user_friendly.description,
            "solution": user_friendly.solution,
            "prevention": user_friendly.prevention,
            "severity": user_friendly.severity,
            "icon": user_friendly.icon,
            "original_error": error_message,
            "error_type": error_type.value if error_type else "unknown"
        }


# „Ç∞„É≠„Éº„Éê„É´„Ç§„É≥„Çπ„Çø„É≥„Çπ
_user_friendly_error_messages = None


def get_user_friendly_error_messages() -> UserFriendlyErrorMessages:
    """
    „É¶„Éº„Ç∂„Éº„Éï„É¨„É≥„Éâ„É™„Éº„Å™„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„Ç∑„Çπ„ÉÜ„É†„ÅÆÂèñÂæó
    
    Returns:
        UserFriendlyErrorMessages: „É¶„Éº„Ç∂„Éº„Éï„É¨„É≥„Éâ„É™„Éº„Å™„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„Ç∑„Çπ„ÉÜ„É†
    """
    global _user_friendly_error_messages
    
    if _user_friendly_error_messages is None:
        _user_friendly_error_messages = UserFriendlyErrorMessages()
    
    return _user_friendly_error_messages


def format_error_for_user(error_message: str, error_type: Optional[ErrorType] = None) -> str:
    """
    „Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„Çí„É¶„Éº„Ç∂„Éº„Éï„É¨„É≥„Éâ„É™„Éº„Å´„Éï„Ç©„Éº„Éû„ÉÉ„Éà
    
    Args:
        error_message: ÂÖÉ„ÅÆ„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏
        error_type: „Ç®„É©„Éº„Çø„Ç§„Éó
        
    Returns:
        str: „Éï„Ç©„Éº„Éû„ÉÉ„Éà„Åï„Çå„Åü„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏
    """
    error_messages = get_user_friendly_error_messages()
    return error_messages.format_error_message(error_message, error_type)


def get_error_guidance_for_user(error_message: str, error_type: Optional[ErrorType] = None) -> Dict[str, Any]:
    """
    „É¶„Éº„Ç∂„ÉºÂêë„Åë„Ç®„É©„Éº„Ç¨„Ç§„ÉÄ„É≥„Çπ„ÇíÂèñÂæó
    
    Args:
        error_message: ÂÖÉ„ÅÆ„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏
        error_type: „Ç®„É©„Éº„Çø„Ç§„Éó
        
    Returns:
        Dict[str, Any]: „Ç®„É©„Éº„Ç¨„Ç§„ÉÄ„É≥„ÇπÊÉÖÂ†±
    """
    error_messages = get_user_friendly_error_messages()
    return error_messages.get_error_guidance(error_message, error_type)


if __name__ == "__main__":
    # „ÉÜ„Çπ„ÉàÂÆüË°å
    error_messages = get_user_friendly_error_messages()
    
    # „ÉÜ„Çπ„Éà„Ç±„Éº„Çπ
    test_errors = [
        "ConnectionError: Failed to establish connection",
        "FileNotFoundError: No such file or directory",
        "ValueError: Invalid data format",
        "AuthenticationError: Invalid API key",
        "ModelError: Failed to load model",
        "NetworkError: Connection timeout",
        "PermissionError: Access denied",
        "ValidationError: Invalid input parameter",
        "APIError: Rate limit exceeded",
        "SystemError: Unexpected internal error"
    ]
    
    print("üß™ „É¶„Éº„Ç∂„Éº„Éï„É¨„É≥„Éâ„É™„Éº„Å™„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„ÉÜ„Çπ„Éà")
    print("=" * 60)
    
    for error in test_errors:
        print(f"\nÂÖÉ„ÅÆ„Ç®„É©„Éº: {error}")
        print("-" * 40)
        formatted = error_messages.format_error_message(error)
        print(formatted)
        print("=" * 60)
