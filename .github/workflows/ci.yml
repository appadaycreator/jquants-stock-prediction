name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      actions: read
    strategy:
      matrix:
        python-version: [3.11, 3.12]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}-${{ matrix.python-version }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov black flake8
        
    - name: Create required directories
      run: |
        mkdir -p logs
        mkdir -p data
        mkdir -p docs/data
        echo "Required directories created"
    
    - name: Code formatting check
      run: |
        black --check --diff . || echo "Black formatting issues found"
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || echo "Flake8 issues found"
    
    - name: Run tests
      env:
        JQUANTS_EMAIL: ${{ secrets.JQUANTS_EMAIL }}
        JQUANTS_PASSWORD: ${{ secrets.JQUANTS_PASSWORD }}
        JQUANTS_ID_TOKEN: ${{ secrets.JQUANTS_ID_TOKEN }}
      run: |
        pytest tests/unit/ -v --cov=. --cov-report=xml --cov-report=html --tb=short --maxfail=10 --durations=10
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report-${{ matrix.python-version }}
        path: |
          coverage.xml
          htmlcov/

  build:
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      pull-requests: read
      actions: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: 'web-app/package-lock.json'
        
    - name: Install Node.js dependencies
      run: |
        cd web-app
        npm ci --legacy-peer-deps
        
    - name: Build web application
      run: |
        cd web-app
        npm run build
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: web-app-build
        path: web-app/out/

  security:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      actions: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
        
    - name: Run security checks
      run: |
        safety check --json --output safety-report.json || echo "Safety check completed with warnings"
        bandit -r . -f json -o bandit-report.json || echo "Bandit scan completed with findings"
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json

  deploy:
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      pull-requests: read
      actions: read
      pages: write
      id-token: write
    
    environment:
      name: production
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: web-app-build
        path: web-app/out/
        
    - name: Deploy to GitHub Pages
      uses: actions/deploy-pages@v4
      with:
        artifact_name: web-app-build
